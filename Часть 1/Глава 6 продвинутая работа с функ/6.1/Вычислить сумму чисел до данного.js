// Напишите функцию sumTo(n), которая вычисляет сумму чисел 1 + 2 + ... + n.

// Например:

// sumTo(1) = 1
// sumTo(2) = 2 + 1 = 3
// sumTo(3) = 3 + 2 + 1 = 6
// sumTo(4) = 4 + 3 + 2 + 1 = 10
// ...
// sumTo(100) = 100 + 99 + ... + 2 + 1 = 5050
// Сделайте три варианта решения:

// С использованием цикла.
// Через рекурсию, т.к. sumTo(n) = n + sumTo(n-1) for n > 1.
// С использованием формулы арифметической прогрессии.
// Пример работы вашей функции:

// function sumTo(n) { /*... ваш код ... */ }

// alert( sumTo(100) ); // 5050
// P.S. Какой вариант решения самый быстрый? Самый медленный? Почему?

// P.P.S. Можно ли при помощи рекурсии посчитать sumTo(100000)?

function sumTo(n) {
    return n > 1 ? n + sumTo(n - 1) : 1
}
function sumTo(n) {
    let sum = 0;
    while (n >= 1) {
        sum += n;
        n--;
    }
    return sum;
}
function sumTo(n) {
    return n * (n + 1) / 2;
}
console.log(sumTo(100)); // 5050

// Самый быстрый вариант это с арифметической прогрессии так как там уже готовая формула и для нахождение требуется одна итерация самый долгий это вариант с рекурсию